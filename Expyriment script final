import expyriment



exp = expyriment.design.Experiment(name="First Experiment")



white = (255,255,255)
black = (0,0,0)
blue = (0,0,255)
green = (0,255,0)


colour_words = ["White", "Blue", "Red", "Green"]
colour_related_words = ["Dove", "Snow", "Sea", "Sky", "Fire", "Anger", "Tree", "Nature"]
neutral_words = ["Abstract", "Dictionary", "Losing", "Bird", "Maths", "French", "Loss", "Book"]
colours_actual = [(255,255,255), (0,0,255), (255,0,0), (0,255,0)]

instructions_1 = """ You will succesively see on the screen colour names, color-related nouns and colour-unrelated words. \n \n \n Each word will be in displayed in a colour font.\n\n\n Your goal is to identify the FONT COLOUR of the words as quickly as possible. \n \n \n Press the SPACE key to continue"""
 
instructions_2 = """ Use the keyboard to give your answers. \n\n\n Use the keys "w" for white, "b" for blue, "r" for red and "g" for green. \n\n\n Please answer as quickly as you can.\n\n\n Press the SPACE key to continue"""



expyriment.control.initialize(exp)



block_one = expyriment.design.Block(name="Learning Block")

trial_one = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(colour_words[0]), text_colour=colours_actual[0])
stim.preload()
trial_one.add_stimulus(stim)

trial_two = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(colour_words[1]), text_colour=colours_actual[1])
stim.preload()
trial_two.add_stimulus(stim)

trial_three = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(colour_words[2]), text_colour=colours_actual[2])
stim.preload()
trial_three.add_stimulus(stim)

trial_four = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(colour_words[3]), text_colour=colours_actual[3])
stim.preload()
trial_four.add_stimulus(stim)

block_one.add_trial(trial_one)
block_one.add_trial(trial_two)
block_one.add_trial(trial_three)
block_one.add_trial(trial_four)
block_one.shuffle_trials()



block_two= expyriment.design.Block(name = "Test-Colours Block")

trial_one_two = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(colour_words[0]), text_colour=colours_actual[1])
stim.preload()
trial_one_two.add_stimulus(stim)

trial_two_two = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(colour_words[1]), text_colour=colours_actual[2])
stim.preload()
trial_two_two.add_stimulus(stim)

trial_three_two = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(colour_words[2]), text_colour=colours_actual[3])
stim.preload()
trial_three_two.add_stimulus(stim)

trial_four_two = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(colour_words[3]), text_colour=colours_actual[0])
stim.preload()
trial_four_two.add_stimulus(stim)

block_two.add_trial(trial_one_two)
block_two.add_trial(trial_two_two)
block_two.add_trial(trial_three_two)
block_two.add_trial(trial_four_two)
block_two.shuffle_trials()
           
           
           
block_three= expyriment.design.Block(name="Test-Colour-Related Block")

trial_one_three = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(colour_related_words[0]), text_colour=colours_actual[1])
stim.preload()
trial_one_three.add_stimulus(stim)

trial_two_three = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(colour_related_words[1]), text_colour=colours_actual[2])
stim.preload()
trial_two_three.add_stimulus(stim)

trial_three_three = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(colour_related_words[2]), text_colour=colours_actual[3])
stim.preload()
trial_three_three.add_stimulus(stim)

trial_four_three = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(colour_related_words[3]), text_colour=colours_actual[0])
stim.preload()
trial_four_three.add_stimulus(stim)

trial_five_three = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(colour_related_words[4]), text_colour=colours_actual[1])
stim.preload()
trial_five_three.add_stimulus(stim)

trial_six_three = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(colour_related_words[5]), text_colour=colours_actual[3])
stim.preload()
trial_six_three.add_stimulus(stim)

trial_seven_three = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(colour_related_words[6]), text_colour=colours_actual[0])
stim.preload()
trial_seven_three.add_stimulus(stim)


trial_eight_three = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(colour_related_words[7]), text_colour=colours_actual[1])
stim.preload()
trial_eight_three.add_stimulus(stim)

block_three.add_trial(trial_one_three)
block_three.add_trial(trial_two_three)
block_three.add_trial(trial_three_three)
block_three.add_trial(trial_four_three)
block_three.add_trial(trial_five_three)
block_three.add_trial(trial_six_three)
block_three.add_trial(trial_seven_three)
block_three.add_trial(trial_eight_three)
block_three.shuffle_trials()




block_four = expyriment.design.Block(name="Test-Neutral Block")

trial_one_four = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(neutral_words[0]), text_colour=colours_actual[2])
stim.preload()
trial_one_four.add_stimulus(stim)

trial_two_four = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(neutral_words[1]), text_colour=colours_actual[3])
stim.preload()
trial_two_four.add_stimulus(stim)

trial_three_four = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(neutral_words[2]), text_colour=colours_actual[0])
stim.preload()
trial_three_four.add_stimulus(stim)

trial_four_four = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(neutral_words[3]), text_colour=colours_actual[2])
stim.preload()
trial_four_four.add_stimulus(stim)

trial_five_four = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(neutral_words[4]), text_colour=colours_actual[3])
stim.preload()
trial_five_four.add_stimulus(stim)

trial_six_four = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(neutral_words[5]), text_colour=colours_actual[0])
stim.preload()
trial_six_four.add_stimulus(stim)

trial_seven_four = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(neutral_words[6]), text_colour=colours_actual[1])
stim.preload()
trial_seven_four.add_stimulus(stim)

trial_eight_four = expyriment.design.Trial()
stim = expyriment.stimuli.TextLine(text=(neutral_words[7]), text_colour=colours_actual[2])
stim.preload()
trial_eight_four.add_stimulus(stim)

block_four.add_trial(trial_one_four)
block_four.add_trial(trial_two_four)
block_four.add_trial(trial_three_four)
block_four.add_trial(trial_four_four)
block_four.add_trial(trial_five_four)
block_four.add_trial(trial_six_four)
block_four.add_trial(trial_seven_four)
block_four.add_trial(trial_eight_four)
block_four.shuffle_trials()



exp.add_block(block_one, copies = 2)
exp.add_block(block_two, copies = 2)
exp.add_block(block_three)
exp.add_block(block_four)



instructions1 = expyriment.stimuli.TextScreen("Instructions", text=instructions_1)
instructions2 = expyriment.stimuli.TextScreen("Instructions", text=instructions_2)


response_keys = [expyriment.misc.constants.K_b, expyriment.misc.constants.K_g, expyriment.misc.constants.K_r, expyriment.misc.constants.K_w]



expyriment.control.start()

instructions1.present()
exp.keyboard.wait(expyriment.misc.constants.K_SPACE)
instructions2.present()
exp.keyboard.wait(expyriment.misc.constants.K_SPACE)

for block in exp.blocks:
    for trial in block.trials:
        exp.clock.wait(1000 - trial.stimuli[0].preload())
        trial.stimuli[0].present()
        button, rt = exp.keyboard.wait(keys=response_keys)
        exp.data.add([button, rt])
        exp.data.rename("associating_colours_results" + str(exp.subject) + ".xpd")
        
        
        
expyriment.control.end(goodbye_text= "Thank you !", goodbye_delay = 3000)
